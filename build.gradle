task wrapper(type: Wrapper) {
    gradleVersion = '1.11'
}
	
buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
		maven {
			url "https://oss.sonatype.org/content/repositories/snapshots"
		}
		maven {
			name 'JCenter - for Gradle Shadow'
			url 'http://jcenter.bintray.com/'
		}
	}
	dependencies {
		classpath 'com.github.jengelman.gradle.plugins:shadow:0.8'
	}
}

allprojects {
	apply plugin: 'java'
	apply plugin: 'maven'	
	apply plugin: 'signing'
	apply plugin: 'eclipse'
	apply plugin: 'idea'
	
	repositories {
		mavenLocal()
		mavenCentral()
		maven { 
			url 'https://oss.sonatype.org/content/repositories/snapshots/' 
		}
		maven { 
			url "http://oss.sonatype.org/content/repositories/releases/" 
		}
	}

	signing {
		sign configurations.archives
	}
        
    signArchives.onlyIf {
		project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')
	}

	uploadArchives.onlyIf {
		project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')
	}

	uploadArchives {
		if (!project.hasProperty('sonatypeUsername') || !project.hasProperty('sonatypePassword')) {
			  return
		}
		
		repositories.mavenDeployer {
			beforeDeployment { 
				MavenDeployment deployment -> signing.signPom(deployment) 
			}

			repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
				authentication(userName: sonatypeUsername, password: sonatypePassword)
			}

			snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots') {
				authentication(userName: sonatypeUsername, password: sonatypePassword)
			}

			pom.project {
				artifactId   "${project.name}"
				name         "${project.name}"
				url          'http://jfxtras.org'
				description  'Miscellaneous components for JavaFX'
				packaging    'jar'
				licenses {
					license {
						name 'BSD'
						url 'http://www.opensource.org/licenses/bsd-license.php'
						distribution 'repo'
					}
				}
				scm {
					url 'scm:git@github.com:jfxtras/jfxtras.git'
					connection 'scm:git@github.com:jfxtras/jfxtras.git'
					developerConnection 'scm:git@github.com:jfxtras/jfxtras.git'
				}
				developers {
					developer { name 'Tom Eugelink' }
				}
			}
		}
	}
}

project(':') {
	dependencies {
		compile project(':jfxtras-agenda') // just add dependencies that will cause all the rest to be added
	}

	apply plugin: 'shadow'

	// merge everything into one jar
	// https://github.com/johnrengelman/shadow
	shadow {
		filter(':jfxtras-*') {
			include '*'
		}		
		//transformer(AppendingTransformer) {
		//	resource = 'META-INF/services/jfxtras.fxml.BuilderService'
		//}
		artifactAttached = false
	}
	
	artifacts {
//		archives shadow.shadowJar
	}
}

subprojects {
	// all projects must be compatible with the java version specified here
	sourceCompatibility = '1.8'
	[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

	// Needed until Gradle supports class-scanning for Java 8
	tasks.withType(Test) {
		scanForTestClasses = false
		include "**/*Test.class"
		include "**/*Test1.class"
		exclude 'jfxtras/labs/test/JFXtrasGuiTest.class'
	}
	
	apply plugin: 'osgi'
	
	configurations {
		asciidoclet
	}
	
	dependencies {
		asciidoclet 'org.asciidoctor:asciidoclet:0.+'
	}
	
	javadoc {
		options.docletpath = configurations.asciidoclet.files.asType(List)
		options.doclet = 'org.asciidoctor.Asciidoclet'
	}

	task docJar(type: Jar, dependsOn: javadoc) {
		classifier = 'javadoc'
		from 'build/docs/javadoc'
	}

	task sourcesJar(type: Jar) {
		from sourceSets.main.allSource
		classifier = 'sources'
	}
	
	jar {
		manifest {
			attributes (\
				'Bundle-Name': project.name
			)
			instruction 'Export-Package',
				'!jfxtras.internal.*',
				'jfxtras.*'
		}
	}

	artifacts {
		archives jar
		archives docJar
		archives sourcesJar
	}
}


class CompileCSS extends DefaultTask {
	@TaskAction
	def compile() {
		def src = project.file(new File(project.projectDir, "/src/main/resources"))
		def tgt = project.file(new File(project.buildDir, "/resources/main"))
		
		ant.delete (includeEmptyDirs: 'true', failonerror: 'false') { 
			fileset(dir: tgt, includes: "**/*.bss") 
		}
		
		project.mkdir tgt
		project.javaexec {
			main = "com.sun.javafx.tools.packager.Main"
			classpath = project.files("${System.properties['java.home']}/../lib/ant-javafx.jar")
			args = [ "-createbss",
				"-srcdir", src,
				"-outdir", tgt
			]
		}
	}
}

project(':jfxtras-agenda') {
	dependencies {
		compile project(':jfxtras-controls')
		testCompile project(':jfxtras-test-support')
	}	

	task compileCSS(type: CompileCSS)
	processResources.finalizedBy(compileCSS)
}

project(':jfxtras-common') {
	dependencies {
		testCompile project(':jfxtras-test-support')
	}	
}

project(':jfxtras-fxml') {
}

project(':jfxtras-window') {
	task compileCSS(type: CompileCSS)
	processResources.finalizedBy(compileCSS)
}

project(':jfxtras-controls') {
	dependencies {
		compile project(':jfxtras-common')
		compile project(':jfxtras-fxml')
		testCompile project(':jfxtras-test-support')
	}
	
	task compileCSS(type: CompileCSS)
	processResources.finalizedBy(compileCSS)
}

project(':jfxtras-test-support') {
	dependencies {
		compile 'junit:junit:4.10'
		compile 'org.mockito:mockito-all:1.9.5'
		compile 'org.loadui:testFx:3.1.2'
	}
}

task uberSourcesJar(type: Jar, dependsOn: subprojects.jar) {    
	archiveName = "jfxtras-all-${project.version}-sources.jar"
    subprojects.each {
        proj -> from {
			println("Merging into uberJar: ${proj.sourcesJar.archivePath}")
			zipTree(proj.sourcesJar.archivePath) 
        }
    }
}

// TODO: _lib folder per project?
task copyToLib(type: Copy) {
    into "_lib"
    from project(':jfxtras-test-support').configurations.testCompile
}
